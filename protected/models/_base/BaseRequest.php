<?php

/**
 * This is the model base class for the table "request".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Request".
 *
 * Columns in table "request" available as properties of the model,
 * followed by relations of table "request" available as properties of the model.
 *
 * @property integer $id
 * @property string $request
 * @property string $phonenumber
 * @property string $email
 * @property string $requestdate
 * @property string $responsedate
 * @property integer $status
 *
 * @property UserRequests[] $userRequests
 */
abstract class BaseRequest extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'request';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Request|Requests', $n);
	}

	public static function representingColumn() {
		return 'request';
	}

	public function rules() {
		return array(
			array('request, requestdate, status', 'required'),
			array('status', 'numerical', 'integerOnly'=>true),
			array('phonenumber', 'length', 'max'=>15),
			array('email', 'length', 'max'=>32),
			array('responsedate', 'safe'),
			array('phonenumber, email, responsedate', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, request, phonenumber, email, requestdate, responsedate, status', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'userRequests' => array(self::HAS_MANY, 'UserRequests', 'idrequest'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'request' => Yii::t('app', 'Request'),
			'phonenumber' => Yii::t('app', 'Phone Number'),
			'email' => Yii::t('app', 'Email'),
			'requestdate' => Yii::t('app', 'Request Date'),
			'responsedate' => Yii::t('app', 'Response Date'),
			'status' => Yii::t('app', 'Status'),
			'userRequests' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;
       
		$criteria->compare('id', $this->id);
		$criteria->compare('request', $this->request, true);
		$criteria->compare('phonenumber', $this->phonenumber, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('requestdate', $this->requestdate, true);
		$criteria->compare('responsedate', $this->responsedate, true);
		$criteria->compare('status', $this->status);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}

    public function searchNewRequest() {
		$criteria = new CDbCriteria;
        $criteria->addCondition('status=0');
		$criteria->compare('id', $this->id);
		$criteria->compare('request', $this->request, true);
		$criteria->compare('phonenumber', $this->phonenumber, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('requestdate', $this->requestdate, true);
		$criteria->compare('responsedate', $this->responsedate, true);
		$criteria->compare('status', $this->status);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
	public function searchArchive() {
		$criteria = new CDbCriteria;
        $criteria->addCondition('status=1');
		$criteria->compare('id', $this->id);
		$criteria->compare('request', $this->request, true);
		$criteria->compare('phonenumber', $this->phonenumber, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('requestdate', $this->requestdate, true);
		$criteria->compare('responsedate', $this->responsedate, true);
		$criteria->compare('status', $this->status);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}

	public function searchUnderProcess() {
		$criteria = new CDbCriteria;
        $criteria->addCondition('status=2');
		$criteria->compare('id', $this->id);
		$criteria->compare('request', $this->request, true);
		$criteria->compare('phonenumber', $this->phonenumber, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('requestdate', $this->requestdate, true);
		$criteria->compare('responsedate', $this->responsedate, true);
		$criteria->compare('status', $this->status);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}

	public function searchClosed() {
		$criteria = new CDbCriteria;
        $criteria->addCondition('status=3');
		$criteria->compare('id', $this->id);
		$criteria->compare('request', $this->request, true);
		$criteria->compare('phonenumber', $this->phonenumber, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('requestdate', $this->requestdate, true);
		$criteria->compare('responsedate', $this->responsedate, true);
		$criteria->compare('status', $this->status);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}

		static function getStatuss()
		{
		return array(
		    array('id'=>'0', 'type'=>'Pending'),
		    array('id'=>'1', 'type'=>'Open'),
		    array('id'=>'2', 'type'=>'Under Process'),
		    array('id'=>'3', 'type'=>'Closed'),
		);
		}
		static function getStatus($onoff)
		{
		if($onoff == 3) 
		    return 'Closed';
		if($onoff == 2) 
		    return 'Under Process';
		if($onoff == 1) 
		    return 'Open';
		else 
		    return 'Pending';
		}
}